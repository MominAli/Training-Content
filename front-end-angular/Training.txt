𝐁𝐚𝐬𝐢𝐜𝐬:
♦ What is Angular?
♦ Explain the key features of Angular.
♦ Differentiate between AngularJS and Angular.
♦ What is TypeScript, and why is it used in Angular?
♦ How do you create a new Angular project using the Angular CLI?
♦ Explain the purpose of the AppModule in Angular.
♦ What is data binding in Angular?
♦ Differentiate between one-way and two-way data binding.
♦ Explain the Angular component lifecycle hooks.
 
𝐂𝐨𝐦𝐩𝐨𝐧𝐞𝐧𝐭𝐬 𝐚𝐧𝐝 𝐃𝐢𝐫𝐞𝐜𝐭𝐢𝐯𝐞𝐬:
♦ What is an Angular component, and how do you create one?
♦ Explain the role of @Component decorator in Angular.
♦ What are Angular directives?
♦ Differentiate between structural and attribute directives.
♦ Explain ngIf, ngFor, and ngSwitch directives.
♦ How do you communicate between components in Angular?
♦ What is ViewChild in Angular?
 
𝐒𝐞𝐫𝐯𝐢𝐜𝐞𝐬 𝐚𝐧𝐝 𝐃𝐞𝐩𝐞𝐧𝐝𝐞𝐧𝐜𝐲 𝐈𝐧𝐣𝐞𝐜𝐭𝐢𝐨𝐧:
♦ What is a service in Angular?
♦ Explain Dependency Injection in Angular.
♦ How do you provide a service in Angular?
♦ What is the purpose of providedIn in @Injectable decorator?
♦ Explain the difference between Singleton and Scoped services.
 
𝐑𝐨𝐮𝐭𝐢𝐧𝐠 𝐚𝐧𝐝 𝐍𝐚𝐯𝐢𝐠𝐚𝐭𝐢𝐨𝐧:
♦ What is Angular Router?
♦ How do you configure routes in Angular?
♦ Explain lazy loading in Angular.
♦ How to pass parameters to a route in Angular?
♦ What is ActivatedRoute?
 
𝐅𝐨𝐫𝐦𝐬:
♦ Explain template-driven forms in Angular.
♦ What are reactive forms in Angular?
♦ How do you perform form validation in Angular?
♦ Explain the purpose of ngModel in forms.
 
𝐏𝐢𝐩𝐞𝐬:
♦ What are pipes in Angular?
♦ Provide examples of built-in pipes in Angular.
♦ How do you create a custom pipe in Angular?
 
𝐑𝐱𝐉𝐒:
♦ What is RxJS?
♦ Explain the concept of Observables.
♦ What are Subjects in RxJS?
♦ How do you unsubscribe from an Observable?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐌𝐨𝐝𝐮𝐥𝐞𝐬:
♦ What is an Angular module?
♦ Explain the difference between NgModule and Component.
♦ How do you import and export modules in Angular?
 
𝐓𝐞𝐬𝐭𝐢𝐧𝐠:
♦ Explain the different testing utilities provided by Angular.
♦ What is TestBed in Angular testing?
♦ How do you write unit tests for an Angular component?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐂𝐋𝐈:
♦ What is the Angular CLI?
♦ How do you generate components, services, and modules using the CLI?
♦ Explain the purpose of the angular.json file.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐁𝐞𝐬𝐭 𝐏𝐫𝐚𝐜𝐭𝐢𝐜𝐞𝐬:
♦ What are some best practices for structuring an Angular application?
♦ Explain the concept of lazy loading and its benefits.
♦ How can you improve Angular application performance?

𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐇𝐓𝐓𝐏:
♦ How do you make HTTP requests in Angular?
♦ Explain the role of HttpClient in Angular.
♦ What is CORS, and how does Angular handle it?
 
𝐀𝐝𝐯𝐚𝐧𝐜𝐞𝐝 𝐂𝐨𝐧𝐜𝐞𝐩𝐭𝐬:
♦ Explain Angular decorators.
♦ What is AOT (Ahead-of-Time) compilation in Angular?
♦ How does change detection work in Angular?
♦ What are Angular Schematics?



𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐒𝐞𝐜𝐮𝐫𝐢𝐭𝐲:
♦ Explain Angular's security features.
♦ How do you prevent Cross-Site Scripting (XSS) attacks in Angular?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐂𝐋𝐈 𝐂𝐨𝐦𝐦𝐚𝐧𝐝𝐬:
♦ What is the purpose of ng lint?
♦ How do you run a specific unit test using the CLI?
♦ Angular and State Management:
♦ What are the options for state management in Angular?
♦ Explain the concept of NgRx.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐌𝐨𝐛𝐢𝐥𝐞 𝐃𝐞𝐯𝐞𝐥𝐨𝐩𝐦𝐞𝐧𝐭:
♦ How does Angular support mobile development?
♦ Explain the concept of Ionic and its relationship with Angular.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐖𝐞𝐛𝐩𝐚𝐜𝐤:
♦ What is Webpack, and how does Angular use it?
♦ Explain the purpose of the webpack.config.js file in an Angular project.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐈𝐧𝐭𝐞𝐫𝐧𝐚𝐭𝐢𝐨𝐧𝐚𝐥𝐢𝐳𝐚𝐭𝐢𝐨𝐧:
♦ How does Angular support internationalization?
♦ What is the purpose of the i18n attribute in Angular?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐀𝐜𝐜𝐞𝐬𝐬𝐢𝐛𝐢𝐥𝐢𝐭𝐲:
♦ How do you ensure accessibility in an Angular application?
♦ Explain ARIA roles and their significance in Angular.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐍𝐠𝐌𝐨𝐝𝐮𝐥𝐞𝐬:
♦ What is the purpose of entryComponents in NgModule metadata?
♦ Explain the difference between declarations and entryComponents.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐃𝐞𝐜𝐨𝐫𝐚𝐭𝐨𝐫𝐬:
♦ What are decorators in TypeScript?
♦ Explain the use of @HostListener and @HostBinding decorators.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐂𝐋𝐈 𝐚𝐧𝐝 𝐁𝐮𝐢𝐥𝐝 𝐎𝐩𝐭𝐢𝐦𝐢𝐳𝐚𝐭𝐢𝐨𝐧:
♦ What is tree-shaking, and how does Angular leverage it?
♦ How do you optimize an Angular application for production?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐍𝐠𝐙𝐨𝐧𝐞:
♦ What is NgZone in Angular, and why is it important?
♦ How do you manually trigger change detection?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐔𝐧𝐢𝐯𝐞𝐫𝐬𝐚𝐥 (𝐒𝐒𝐑):
♦ What is Angular Universal?
♦ Explain the benefits of Server-Side Rendering (SSR) in Angular.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐀𝐧𝐢𝐦𝐚𝐭𝐢𝐨𝐧:
♦ How do you implement animations in Angular?
♦ Explain the purpose of the BrowserAnimationsModule.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐃𝐨𝐜𝐤𝐞𝐫:
♦ How do you containerize an Angular application using Docker?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐍𝐠𝐑𝐱:
♦ What is NgRx, and why might you use it?
♦ Explain the core principles of NgRx.
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐌𝐢𝐜𝐫𝐨𝐟𝐫𝐨𝐧𝐭𝐞𝐧𝐝𝐬:
♦ How can Angular be used in a microfrontend architecture?
♦ What challenges may arise when implementing microfrontends with Angular?
  
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐖𝐞𝐛 𝐂𝐨𝐦𝐩𝐨𝐧𝐞𝐧𝐭𝐬:
♦ How does Angular interact with Web Components?
♦ What are the advantages of using Angular Elements?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐎𝐛𝐬𝐞𝐫𝐯𝐚𝐛𝐥𝐞𝐬:
♦ Explain the concept of multicasting in Observables.
♦ How do you handle errors in Angular Observables?
 
𝐀𝐧𝐠𝐮𝐥𝐚𝐫 𝐚𝐧𝐝 𝐍𝐠𝐙𝐨𝐧𝐞:
♦ What is NgZone in Angular, and why is it important?
♦ How do you manually trigger change detection?